/*
 * Copyright (C) 2021 badi_
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package videorental;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Date;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Properties;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatter;

/**
 *
 * @author badi_
 */
public class AddRental extends javax.swing.JFrame {

    /**
     * Creates new form AddRental
     */
    public AddRental(DBManager DB, int customerID) {
        this.DB = DB;
        this.customerID = customerID;
        selectedIndex = -1;

        initComponents();

        String sql = "SELECT CONCAT(CustomerID,' - ',Firstname,' ',Lastname,' (',Email,')') FROM Customer"
                + " WHERE CustomerID = " + customerID + ";";
        DB.connect();
        ResultSet result = DB.makeQuery(sql);
        if (Utils.getResultSize(result) > 0) {
            try {
                result.next();
                setTitle(result.getString(1));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        sql = "SELECT PaymentmethodID, Name FROM Paymentmethod;";
        result = DB.makeQuery(sql);
        if (Utils.getResultSize(result) > 0) {
            Utils.populateComboBox(jComboBoxPaymentMethods, result, "-");
        }
        DB.close();
        pack();
        
        //set current date to date box
        LocalDate now = LocalDate.now();
        jTextFieldStartDate.setText(now.getYear() + "-" + String.format("%02d", now.getMonthValue()) + "-" + String.format("%02d", now.getDayOfMonth()));

    }

    private void updatePrice() {
        float totalprice = 0;
        for (int i = 0; i < jTableRentalItems.getRowCount(); i++) {
            totalprice += (Float) Utils.getSelectedCellContent(i, 3, jTableRentalItems);
        }
        int days = (int) jSpinnerRentalDays.getValue();
        jTextFieldTotalPrice.setText(String.format(Locale.ROOT, "%.2f", days * totalprice));
    }

    private void closeWindow() {
        WindowEvent closingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closingEvent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelMainView = new javax.swing.JPanel();
        jTextFieldFilmTitle = new javax.swing.JTextField();
        jTextFieldFilmID = new javax.swing.JTextField();
        jLabelFilmSearch = new javax.swing.JLabel();
        jLabelFilmID = new javax.swing.JLabel();
        jLabelFilmtitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFilm = new javax.swing.JTable();
        jButtonFilmSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRentalItems = new javax.swing.JTable();
        jButtonAddFilm = new javax.swing.JButton();
        jComboBoxMedia = new javax.swing.JComboBox<>();
        jButtonRemoveItem = new javax.swing.JButton();
        jSpinnerRentalDays = new javax.swing.JSpinner();
        jLabelDays = new javax.swing.JLabel();
        jTextFieldTotalPrice = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldStartDate = new javax.swing.JTextField();
        jLabelStartDate = new javax.swing.JLabel();
        jLabelError = new javax.swing.JLabel();
        jComboBoxPaymentMethods = new javax.swing.JComboBox<>();
        jLabelPaymentMethod = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();
        jButtonSubmit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanelMainView.setBackground(new java.awt.Color(250, 250, 250));
        jPanelMainView.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelMainView.setLayout(new java.awt.GridBagLayout());

        jTextFieldFilmTitle.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldFilmTitle.setMinimumSize(new java.awt.Dimension(140, 22));
        jTextFieldFilmTitle.setPreferredSize(new java.awt.Dimension(140, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanelMainView.add(jTextFieldFilmTitle, gridBagConstraints);

        jTextFieldFilmID.setMinimumSize(new java.awt.Dimension(70, 20));
        jTextFieldFilmID.setPreferredSize(new java.awt.Dimension(70, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 0, 0);
        jPanelMainView.add(jTextFieldFilmID, gridBagConstraints);

        jLabelFilmSearch.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmSearch.setText("Film Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanelMainView.add(jLabelFilmSearch, gridBagConstraints);

        jLabelFilmID.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmID.setText("ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        jPanelMainView.add(jLabelFilmID, gridBagConstraints);

        jLabelFilmtitle.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmtitle.setText("Title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanelMainView.add(jLabelFilmtitle, gridBagConstraints);

        jTableFilm.setAutoCreateRowSorter(true);
        jTableFilm.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTableFilm.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Year"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFilm.setFillsViewportHeight(true);
        jTableFilm.setRowHeight(20);
        jTableFilm.setShowGrid(true);
        jTableFilm.setShowHorizontalLines(false);
        jTableFilm.getTableHeader().setReorderingAllowed(false);
        jTableFilm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableFilmMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableFilm);
        if (jTableFilm.getColumnModel().getColumnCount() > 0) {
            jTableFilm.getColumnModel().getColumn(0).setMinWidth(80);
            jTableFilm.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTableFilm.getColumnModel().getColumn(0).setMaxWidth(80);
            jTableFilm.getColumnModel().getColumn(2).setMinWidth(80);
            jTableFilm.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTableFilm.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanelMainView.add(jScrollPane1, gridBagConstraints);

        jButtonFilmSearch.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonFilmSearch.setText("Search");
        jButtonFilmSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilmSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanelMainView.add(jButtonFilmSearch, gridBagConstraints);

        jTableRentalItems.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTableRentalItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FilmmediaID", "Film", "Media", "Price/day"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableRentalItems.setFillsViewportHeight(true);
        jTableRentalItems.setRowHeight(20);
        jTableRentalItems.setShowGrid(true);
        jTableRentalItems.setShowHorizontalLines(false);
        jScrollPane2.setViewportView(jTableRentalItems);
        if (jTableRentalItems.getColumnModel().getColumnCount() > 0) {
            jTableRentalItems.getColumnModel().getColumn(0).setMinWidth(0);
            jTableRentalItems.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTableRentalItems.getColumnModel().getColumn(0).setMaxWidth(0);
            jTableRentalItems.getColumnModel().getColumn(2).setMinWidth(100);
            jTableRentalItems.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTableRentalItems.getColumnModel().getColumn(2).setMaxWidth(100);
            jTableRentalItems.getColumnModel().getColumn(3).setMinWidth(100);
            jTableRentalItems.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTableRentalItems.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanelMainView.add(jScrollPane2, gridBagConstraints);

        jButtonAddFilm.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonAddFilm.setText("Add Film >");
        jButtonAddFilm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddFilmActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanelMainView.add(jButtonAddFilm, gridBagConstraints);

        jComboBoxMedia.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jComboBoxMedia.setMinimumSize(new java.awt.Dimension(180, 26));
        jComboBoxMedia.setName(""); // NOI18N
        jComboBoxMedia.setPreferredSize(new java.awt.Dimension(180, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 0);
        jPanelMainView.add(jComboBoxMedia, gridBagConstraints);

        jButtonRemoveItem.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonRemoveItem.setText("Remove");
        jButtonRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveItemActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanelMainView.add(jButtonRemoveItem, gridBagConstraints);

        jSpinnerRentalDays.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jSpinnerRentalDays.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        jSpinnerRentalDays.setMinimumSize(new java.awt.Dimension(60, 20));
        jSpinnerRentalDays.setName(""); // NOI18N
        jSpinnerRentalDays.setPreferredSize(new java.awt.Dimension(60, 20));
        jSpinnerRentalDays.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerRentalDaysStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 0);
        jPanelMainView.add(jSpinnerRentalDays, gridBagConstraints);

        jLabelDays.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelDays.setText("Total Days");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanelMainView.add(jLabelDays, gridBagConstraints);

        jTextFieldTotalPrice.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldTotalPrice.setMinimumSize(new java.awt.Dimension(60, 20));
        jTextFieldTotalPrice.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanelMainView.add(jTextFieldTotalPrice, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel1.setText("Total Price");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanelMainView.add(jLabel1, gridBagConstraints);

        jTextFieldStartDate.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldStartDate.setMinimumSize(new java.awt.Dimension(90, 22));
        jTextFieldStartDate.setPreferredSize(new java.awt.Dimension(90, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanelMainView.add(jTextFieldStartDate, gridBagConstraints);

        jLabelStartDate.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelStartDate.setText("Start Date (yyyy-mm-dd)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanelMainView.add(jLabelStartDate, gridBagConstraints);

        jLabelError.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelError.setForeground(new java.awt.Color(255, 0, 51));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanelMainView.add(jLabelError, gridBagConstraints);

        jComboBoxPaymentMethods.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jComboBoxPaymentMethods.setMinimumSize(new java.awt.Dimension(100, 24));
        jComboBoxPaymentMethods.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelMainView.add(jComboBoxPaymentMethods, gridBagConstraints);

        jLabelPaymentMethod.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelPaymentMethod.setText("Payment Method");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 0, 0);
        jPanelMainView.add(jLabelPaymentMethod, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        getContentPane().add(jPanelMainView, gridBagConstraints);

        jButtonCancel.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 0);
        getContentPane().add(jButtonCancel, gridBagConstraints);

        jButtonSubmit.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonSubmit.setText("Submit");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 20);
        getContentPane().add(jButtonSubmit, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        closeWindow();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonFilmSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilmSearchActionPerformed
        String ID = jTextFieldFilmID.getText();
        String title = jTextFieldFilmTitle.getText();

        //leave if the ID field has text that isn't a positive integer
        if (!ID.matches("\\d+") && !ID.isEmpty()) {
            return;
        }
        ArrayList<Object> data = new ArrayList<>();
        String sql = "Select FilmID, Title, Year FROM Film WHERE ";
        if (ID.isEmpty() && title.isEmpty()) {
            sql += "1;";
        } else if (!ID.isEmpty()) {
            sql += "FilmID = ?;";
            data.add(Integer.valueOf(ID));
        } else {
            sql += "Title LIKE ?;";
            data.add("%" + title + "%");
        }
        DB.connect();
        ResultSet result = DB.makeQuery(sql, data);
        DB.close();

        Utils.populateTable(jTableFilm, result);
    }//GEN-LAST:event_jButtonFilmSearchActionPerformed

    private void jTableFilmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFilmMouseClicked
        int index = jTableFilm.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTableFilm.getModel();
        Integer filmID = (Integer) model.getValueAt(index, 0);

        if (evt.getClickCount() == 2) {
            ViewFilm view = new ViewFilm(filmID, DB);
            view.setLocationRelativeTo(this);
            view.setVisible(true);
        }

        if (index == selectedIndex) {
            return;
        }
        jComboBoxMedia.removeAllItems();
        selectedIndex = index;

        String sql = "SELECT Media.MediaID, Media.Name, Filmmedia.Stock, COUNT(Rentalitem.RentalitemID), SUM(Filmrental.Returned) FROM Media"
                + " INNER JOIN Filmmedia USING(MediaID)"
                + " LEFT JOIN Rentalitem USING(FilmmediaID)"
                + " LEFT JOIN Filmrental USING (FilmrentalID)"
                + " WHERE Filmmedia.FilmID = ?"
                + " GROUP BY Media.MediaID;";
        ArrayList<Object> data = new ArrayList<>();
        data.add(filmID);
        
        DB.connect();
        ResultSet result = DB.makeQuery(sql, data);
        DB.close();

        if (Utils.getResultSize(result) == 0) {
            jComboBoxMedia.addItem("No media found");
        } else {
            try {
                //Build strings to add to combobox for selection
                while (result.next()) {
                    String newItem = result.getInt(1) + " - " + result.getString(2);
                    if (!result.getString(2).equals("Streaming")) {
                        newItem += " (" + (result.getInt(3) - result.getInt(4) + result.getInt(5)) + " left)";
                    }
                    jComboBoxMedia.addItem(newItem);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }


    }//GEN-LAST:event_jTableFilmMouseClicked

    private void jButtonAddFilmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddFilmActionPerformed
        String selectedMedia = (String) jComboBoxMedia.getSelectedItem();
        int selectedIndex = jTableFilm.getSelectedRow();

        boolean mediaLeft = false;

        if (selectedMedia.contains("Streaming")) {
            mediaLeft = true;
        } else if (!selectedMedia.equals("No media found") && Integer.valueOf(selectedMedia.split(" \\(")[1].split(" ")[0]) != 0) {
            mediaLeft = true;
        }
        if (!mediaLeft) {
            return;
        }

        DefaultTableModel model = (DefaultTableModel) jTableFilm.getModel();
        Integer filmID = (Integer) model.getValueAt(selectedIndex, 0);
        Integer mediaID = Integer.valueOf(Utils.getSelectedID(selectedMedia));
        String title = (String) model.getValueAt(selectedIndex, 1);
        String mediaName = Utils.getSelectedValue(selectedMedia);
        if (mediaName.split("\\(").length > 1) {
            mediaName = mediaName.split("\\(")[0];
        }
        
        String sql = "SELECT Price, FilmmediaID FROM Filmmedia WHERE FilmID = ? AND MediaID = ?;";
        ArrayList<Object> data = new ArrayList<>();
        data.add(filmID);
        data.add(mediaID);
                
        DB.connect();
        ResultSet result = DB.makeQuery(sql, data);
        DB.close();

        Float price = Float.valueOf(0);
        Integer filmMediaID = 0;
        try {
            if (Utils.getResultSize(result) > 0) {
                result.next();
                price = result.getFloat(1);
                filmMediaID = Integer.valueOf(result.getInt(2));
            }
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }

        Object[] newRow = {filmMediaID, title, mediaName, price};

        Utils.addTableEntry(jTableRentalItems, newRow);

        updatePrice();
    }//GEN-LAST:event_jButtonAddFilmActionPerformed

    private void jButtonRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveItemActionPerformed
        Utils.removeTableEntry(jTableRentalItems, jTableRentalItems.getSelectedRow());
        updatePrice();
    }//GEN-LAST:event_jButtonRemoveItemActionPerformed

    private void jSpinnerRentalDaysStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerRentalDaysStateChanged
        updatePrice();
    }//GEN-LAST:event_jSpinnerRentalDaysStateChanged

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        jLabelError.setText("");
        String dateText = jTextFieldStartDate.getText();
        if (!dateText.matches("\\d\\d\\d\\d-\\d\\d-\\d\\d")) {
            jLabelError.setText("Please use the YYYY-MM-DD format for start date.");
            return;
        }
        if (jTableRentalItems.getRowCount() < 1) {
            return;
        }
        if (jTextFieldTotalPrice.getText().isEmpty()) {
            jLabelError.setText("Please enter total price.");
            return;
        }
        if (jComboBoxPaymentMethods.getSelectedIndex() == 0) {
            jLabelError.setText("Please choose payment method.");
        }

        //SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        java.sql.Date date = Utils.getDate(dateText);
        if (date == null) {
            jLabelError.setText("Date format error");
            return;
        }
        /*
        try {
            date = new java.sql.Date(dateFormat.parse(dateText).getTime());
        } catch (Exception e) {
            e.printStackTrace();
            jLabelError.setText("Date format error");
            return;
        }
        */

        String paymentMethodString = (String) jComboBoxPaymentMethods.getSelectedItem();
        Integer paymentMethod = Integer.valueOf(Utils.getSelectedID(paymentMethodString));
        Integer rentLength = (Integer) jSpinnerRentalDays.getValue();

        Float rentPrice;
        try {
            rentPrice = Float.valueOf(jTextFieldTotalPrice.getText());
        } catch (NumberFormatException e) {
            e.printStackTrace();
            jLabelError.setText("Please enter price as a decimal number using '.' as separator.");
            return;
        }

        String sql = "INSERT INTO Filmrental (FilmrentalID, CustomerID, PaymentmethodID, Rentdate, Rentlength, Totalprice, Returned)"
                + " VALUES (null,?,?,?,?,?,FALSE);";
        ArrayList<Object> data = new ArrayList<>();
        data.add(Integer.valueOf(customerID));
        data.add(paymentMethod);
        data.add(date);
        data.add(rentLength);
        data.add(rentPrice);

        DB.connect();
        DB.makeQuery(sql, data);
        int newKey = DB.getLastGeneratedKey();
        if (newKey < 1) {
            jLabelError.setText("Error writing to database");
            DB.close();
            return;
        }
        
        for (int i=0; i < jTableRentalItems.getRowCount(); i++) {
            Integer filmMediaID = (Integer) Utils.getSelectedCellContent(i, 0, jTableRentalItems);
            sql = "INSERT INTO Rentalitem (RentalitemID, FilmrentalID, FilmmediaID) VALUES (null,?,?);";
            data.clear();
            data.add(Integer.valueOf(newKey));
            data.add(filmMediaID);
            DB.makeQuery(sql, data);
        }
        DB.close();
        closeWindow();
    }//GEN-LAST:event_jButtonSubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Metal look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddRental.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddRental.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddRental.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddRental.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddRental(null, 0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddFilm;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonFilmSearch;
    private javax.swing.JButton jButtonRemoveItem;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JComboBox<String> jComboBoxMedia;
    private javax.swing.JComboBox<String> jComboBoxPaymentMethods;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDays;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JLabel jLabelFilmID;
    private javax.swing.JLabel jLabelFilmSearch;
    private javax.swing.JLabel jLabelFilmtitle;
    private javax.swing.JLabel jLabelPaymentMethod;
    private javax.swing.JLabel jLabelStartDate;
    private javax.swing.JPanel jPanelMainView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerRentalDays;
    private javax.swing.JTable jTableFilm;
    private javax.swing.JTable jTableRentalItems;
    private javax.swing.JTextField jTextFieldFilmID;
    private javax.swing.JTextField jTextFieldFilmTitle;
    private javax.swing.JTextField jTextFieldStartDate;
    private javax.swing.JTextField jTextFieldTotalPrice;
    // End of variables declaration//GEN-END:variables
    private int customerID;
    private DBManager DB;

    private int selectedIndex;
}
