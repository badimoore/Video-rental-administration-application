/*
 * Copyright (C) 2021 badi_
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package videorental;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author badi_
 */
public class MainView extends javax.swing.JFrame {

    /**
     * Creates new form MainView
     */
    public MainView(DBManager DB, String userName) {

        this.DB = DB;
        setTitle("Welcome: " + userName);

        initComponents();

        refreshComboBoxes();
    }

    private void refreshComboBoxes() {
        DB.connect();
        ResultSet genres = DB.makeQuery("Select GenreID, Name FROM Genre;");
        ResultSet countries = DB.makeQuery("Select CountryID, Name FROM Country;");
        ResultSet ratings = DB.makeQuery("Select RatingID, Designation FROM Rating;");
        DB.close();

        Utils.populateComboBox(jComboBoxFilmGenre, genres, "Any");
        Utils.populateComboBox(jComboBoxFilmCountry, countries, "Any");
        Utils.populateComboBox(jComboBoxFilmRating, ratings, "Any");
    }

    private void closeWindow() {
        WindowEvent closingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closingEvent);
    }

    private void addUser(int userID) {
        UserInfo newUser = new UserInfo(DB, userID);
        newUser.setLocationRelativeTo(this);
        newUser.setVisible(true);
    }

    private void addCrew(int crewID) {
        CrewInfo crew = new CrewInfo(DB, crewID);
        crew.setVisible(true);
        crew.setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jToolBar1 = new javax.swing.JToolBar();
        jButtonAddCustomer = new javax.swing.JButton();
        jButtonAddFilm = new javax.swing.JButton();
        jButtonAddCrew = new javax.swing.JButton();
        jPanelMainView = new javax.swing.JPanel();
        jLabelSearch = new javax.swing.JLabel();
        jComboBoxSearchSelect = new javax.swing.JComboBox<>();
        jPanelSearchView = new javax.swing.JPanel();
        jPanelSearchStart = new javax.swing.JPanel();
        jLabelSearchPrompt = new javax.swing.JLabel();
        jPanelCustomers = new javax.swing.JPanel();
        jLabelCustomerSearch = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCustomers = new javax.swing.JTable();
        jTextFieldCustomerName = new javax.swing.JTextField();
        jLabelCustomerName = new javax.swing.JLabel();
        jLabelCustomerID = new javax.swing.JLabel();
        jTextFieldCustomerID = new javax.swing.JTextField();
        jButtonCustomerSearch = new javax.swing.JButton();
        jCheckBoxOverdue = new javax.swing.JCheckBox();
        jLabelCustomerError = new javax.swing.JLabel();
        jButtonAddRental = new javax.swing.JButton();
        jButtonDeleteCustomer = new javax.swing.JButton();
        jPanelFilms = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableFilms = new javax.swing.JTable();
        jTextFieldFilmTitle = new javax.swing.JTextField();
        jTextFieldFilmID = new javax.swing.JTextField();
        jLabelFilmYear = new javax.swing.JLabel();
        jLabelFilmID = new javax.swing.JLabel();
        jLabelFilmTitle = new javax.swing.JLabel();
        jLabelFilmCrew = new javax.swing.JLabel();
        jLabelFilmSearch = new javax.swing.JLabel();
        jButtonFilmSearch = new javax.swing.JButton();
        jTextFieldFilmEndYear = new javax.swing.JTextField();
        jLabelFilmRating = new javax.swing.JLabel();
        jLabelFilmCountry = new javax.swing.JLabel();
        jComboBoxFilmRating = new javax.swing.JComboBox<>();
        jComboBoxFilmCountry = new javax.swing.JComboBox<>();
        jLabelFilmGenre = new javax.swing.JLabel();
        jTextFieldFilmCrew = new javax.swing.JTextField();
        jComboBoxFilmGenre = new javax.swing.JComboBox<>();
        jLabelFilmError = new javax.swing.JLabel();
        jTextFieldFilmStartYear = new javax.swing.JTextField();
        jLabelFilmYearSeparator = new javax.swing.JLabel();
        jPanelRentals = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableRentals = new javax.swing.JTable();
        jButtonRentalSearch = new javax.swing.JButton();
        jButtonRentalReturn = new javax.swing.JButton();
        jLabelRentalCustomerID = new javax.swing.JLabel();
        jLabelRentalCustomerName = new javax.swing.JLabel();
        jTextFieldRentalCustomerID = new javax.swing.JTextField();
        jTextFieldRentalCustomerName = new javax.swing.JTextField();
        jCheckBoxUnreturned = new javax.swing.JCheckBox();
        jCheckBoxRentalOverdue = new javax.swing.JCheckBox();
        jSliderRentalTime = new javax.swing.JSlider();
        jLabelRentalDayLimit = new javax.swing.JLabel();
        jCheckBoxRentalUnlimitedSearch = new javax.swing.JCheckBox();
        jLabelRentalSearch = new javax.swing.JLabel();
        jPanelCrew = new javax.swing.JPanel();
        jLabelCrewName = new javax.swing.JLabel();
        jLabelCrewID = new javax.swing.JLabel();
        jTextFieldCrewID = new javax.swing.JTextField();
        jTextFieldCrewName = new javax.swing.JTextField();
        jTextFieldCrewFilm = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableCrew = new javax.swing.JTable();
        jButtonCrewSearch = new javax.swing.JButton();
        jLabelCrewFilm = new javax.swing.JLabel();
        jButtonDeleteCrew = new javax.swing.JButton();
        jLabelCrewSearch = new javax.swing.JLabel();
        jPanelReviews = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableReviews = new javax.swing.JTable();
        jButtonDeleteReview = new javax.swing.JButton();
        jLabelReviewCustomerID = new javax.swing.JLabel();
        jLabelReviewCustomerName = new javax.swing.JLabel();
        jLabelReviewFilmID = new javax.swing.JLabel();
        jLabelReviewFilmName = new javax.swing.JLabel();
        jButtonReviewSearch = new javax.swing.JButton();
        jTextFieldReviewCustomerID = new javax.swing.JTextField();
        jTextFieldReviewFilmName = new javax.swing.JTextField();
        jTextFieldReviewFilmID = new javax.swing.JTextField();
        jTextFieldReviewCustomerName = new javax.swing.JTextField();
        jLabelReviewSearch = new javax.swing.JLabel();
        jMenuBarMenu = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemAddUser = new javax.swing.JMenuItem();
        jMenuItemAddFilm = new javax.swing.JMenuItem();
        jMenuItemAddCrew = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemCrewRole = new javax.swing.JMenuItem();
        jMenuItemRatings = new javax.swing.JMenuItem();
        jMenuItemEditKeywords = new javax.swing.JMenuItem();
        jMenuStudios = new javax.swing.JMenuItem();
        jMenuItemLanguages = new javax.swing.JMenuItem();
        jMenuItemGenres = new javax.swing.JMenuItem();
        jMenuItemMedia = new javax.swing.JMenuItem();
        jMenuItemCountries = new javax.swing.JMenuItem();
        jMenuItemTypes = new javax.swing.JMenuItem();
        jMenuItemMethods = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemDBTest = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 768));
        setPreferredSize(new java.awt.Dimension(1024, 768));

        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);
        jToolBar1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jToolBar1.setMargin(new java.awt.Insets(5, 5, 5, 5));

        jButtonAddCustomer.setBackground(new java.awt.Color(204, 255, 255));
        jButtonAddCustomer.setFont(new java.awt.Font("Verdana", 0, 8)); // NOI18N
        jButtonAddCustomer.setText("<html><center>Add<br>Customer</center></html>");
        jButtonAddCustomer.setFocusable(false);
        jButtonAddCustomer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddCustomer.setMaximumSize(new java.awt.Dimension(60, 60));
        jButtonAddCustomer.setMinimumSize(new java.awt.Dimension(60, 60));
        jButtonAddCustomer.setPreferredSize(new java.awt.Dimension(60, 60));
        jButtonAddCustomer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCustomerActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonAddCustomer);

        jButtonAddFilm.setBackground(new java.awt.Color(204, 255, 255));
        jButtonAddFilm.setFont(new java.awt.Font("Verdana", 0, 8)); // NOI18N
        jButtonAddFilm.setText("Add Film");
        jButtonAddFilm.setFocusable(false);
        jButtonAddFilm.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddFilm.setMaximumSize(new java.awt.Dimension(60, 60));
        jButtonAddFilm.setMinimumSize(new java.awt.Dimension(60, 60));
        jButtonAddFilm.setPreferredSize(new java.awt.Dimension(60, 60));
        jButtonAddFilm.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddFilm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddFilmActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonAddFilm);

        jButtonAddCrew.setBackground(new java.awt.Color(204, 255, 255));
        jButtonAddCrew.setFont(new java.awt.Font("Verdana", 0, 8)); // NOI18N
        jButtonAddCrew.setText("Add Crew");
        jButtonAddCrew.setFocusable(false);
        jButtonAddCrew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddCrew.setMaximumSize(new java.awt.Dimension(60, 60));
        jButtonAddCrew.setMinimumSize(new java.awt.Dimension(60, 60));
        jButtonAddCrew.setPreferredSize(new java.awt.Dimension(60, 60));
        jButtonAddCrew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddCrew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCrewActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonAddCrew);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.WEST);

        jPanelMainView.setMinimumSize(new java.awt.Dimension(32767, 32767));
        jPanelMainView.setPreferredSize(new java.awt.Dimension(32767, 32767));
        jPanelMainView.setLayout(new java.awt.GridBagLayout());

        jLabelSearch.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelSearch.setText("Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanelMainView.add(jLabelSearch, gridBagConstraints);

        jComboBoxSearchSelect.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jComboBoxSearchSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Customers", "Films", "Cast & Crew", "Rentals", "Reviews" }));
        jComboBoxSearchSelect.setMinimumSize(new java.awt.Dimension(140, 24));
        jComboBoxSearchSelect.setPreferredSize(new java.awt.Dimension(140, 24));
        jComboBoxSearchSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSearchSelectActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanelMainView.add(jComboBoxSearchSelect, gridBagConstraints);

        jPanelSearchView.setBackground(new java.awt.Color(204, 204, 255));
        jPanelSearchView.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelSearchView.setMinimumSize(new java.awt.Dimension(32767, 32767));
        jPanelSearchView.setName(""); // NOI18N
        jPanelSearchView.setPreferredSize(new java.awt.Dimension(32767, 32767));
        jPanelSearchView.setLayout(new java.awt.CardLayout());

        jPanelSearchStart.setBackground(new java.awt.Color(250, 250, 250));
        jPanelSearchStart.setLayout(new java.awt.BorderLayout());

        jLabelSearchPrompt.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabelSearchPrompt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSearchPrompt.setText("Select category to begin search");
        jLabelSearchPrompt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanelSearchStart.add(jLabelSearchPrompt, java.awt.BorderLayout.CENTER);

        jPanelSearchView.add(jPanelSearchStart, "start");

        jPanelCustomers.setBackground(new java.awt.Color(250, 250, 250));
        jPanelCustomers.setMinimumSize(new java.awt.Dimension(2147483647, 2147483647));
        jPanelCustomers.setPreferredSize(new java.awt.Dimension(2147483647, 2147483647));
        jPanelCustomers.setLayout(new java.awt.GridBagLayout());

        jLabelCustomerSearch.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabelCustomerSearch.setText("Customer search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelCustomers.add(jLabelCustomerSearch, gridBagConstraints);

        jTableCustomers.setAutoCreateRowSorter(true);
        jTableCustomers.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTableCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Total rented"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCustomers.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTableCustomers.setFillsViewportHeight(true);
        jTableCustomers.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jTableCustomers.setRowHeight(20);
        jTableCustomers.setShowGrid(true);
        jTableCustomers.setShowHorizontalLines(false);
        jTableCustomers.getTableHeader().setReorderingAllowed(false);
        jTableCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCustomersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCustomers);
        if (jTableCustomers.getColumnModel().getColumnCount() > 0) {
            jTableCustomers.getColumnModel().getColumn(0).setMinWidth(80);
            jTableCustomers.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTableCustomers.getColumnModel().getColumn(0).setMaxWidth(80);
            jTableCustomers.getColumnModel().getColumn(2).setMinWidth(80);
            jTableCustomers.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTableCustomers.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanelCustomers.add(jScrollPane1, gridBagConstraints);

        jTextFieldCustomerName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldCustomerName.setMinimumSize(new java.awt.Dimension(140, 24));
        jTextFieldCustomerName.setPreferredSize(new java.awt.Dimension(140, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 5, 0, 0);
        jPanelCustomers.add(jTextFieldCustomerName, gridBagConstraints);

        jLabelCustomerName.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelCustomerName.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        jPanelCustomers.add(jLabelCustomerName, gridBagConstraints);

        jLabelCustomerID.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelCustomerID.setText("ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelCustomers.add(jLabelCustomerID, gridBagConstraints);

        jTextFieldCustomerID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldCustomerID.setMinimumSize(new java.awt.Dimension(140, 24));
        jTextFieldCustomerID.setPreferredSize(new java.awt.Dimension(140, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 5, 0, 0);
        jPanelCustomers.add(jTextFieldCustomerID, gridBagConstraints);

        jButtonCustomerSearch.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonCustomerSearch.setText("Search");
        jButtonCustomerSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCustomerSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 5, 0, 0);
        jPanelCustomers.add(jButtonCustomerSearch, gridBagConstraints);

        jCheckBoxOverdue.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jCheckBoxOverdue.setText("Has overdue rentals");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanelCustomers.add(jCheckBoxOverdue, gridBagConstraints);

        jLabelCustomerError.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelCustomerError.setForeground(new java.awt.Color(255, 0, 51));
        jLabelCustomerError.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabelCustomerError.setFocusable(false);
        jLabelCustomerError.setMaximumSize(new java.awt.Dimension(140, 50));
        jLabelCustomerError.setMinimumSize(new java.awt.Dimension(140, 16));
        jLabelCustomerError.setPreferredSize(new java.awt.Dimension(140, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 20, 0, 0);
        jPanelCustomers.add(jLabelCustomerError, gridBagConstraints);

        jButtonAddRental.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonAddRental.setText("Add Rental");
        jButtonAddRental.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddRentalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        jPanelCustomers.add(jButtonAddRental, gridBagConstraints);

        jButtonDeleteCustomer.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonDeleteCustomer.setText("Delete Customer");
        jButtonDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteCustomerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 20);
        jPanelCustomers.add(jButtonDeleteCustomer, gridBagConstraints);

        jPanelSearchView.add(jPanelCustomers, "customers");

        jPanelFilms.setBackground(new java.awt.Color(250, 250, 250));
        jPanelFilms.setLayout(new java.awt.GridBagLayout());

        jTableFilms.setAutoCreateRowSorter(true);
        jTableFilms.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTableFilms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Rating", "Year"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFilms.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTableFilms.setFillsViewportHeight(true);
        jTableFilms.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jTableFilms.setRowHeight(20);
        jTableFilms.setShowGrid(true);
        jTableFilms.setShowHorizontalLines(false);
        jTableFilms.getTableHeader().setReorderingAllowed(false);
        jTableFilms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableFilmsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableFilms);
        if (jTableFilms.getColumnModel().getColumnCount() > 0) {
            jTableFilms.getColumnModel().getColumn(0).setMinWidth(80);
            jTableFilms.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTableFilms.getColumnModel().getColumn(0).setMaxWidth(80);
            jTableFilms.getColumnModel().getColumn(2).setMinWidth(80);
            jTableFilms.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTableFilms.getColumnModel().getColumn(2).setMaxWidth(80);
            jTableFilms.getColumnModel().getColumn(3).setMinWidth(80);
            jTableFilms.getColumnModel().getColumn(3).setPreferredWidth(80);
            jTableFilms.getColumnModel().getColumn(3).setMaxWidth(80);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanelFilms.add(jScrollPane2, gridBagConstraints);

        jTextFieldFilmTitle.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldFilmTitle.setMinimumSize(new java.awt.Dimension(140, 24));
        jTextFieldFilmTitle.setPreferredSize(new java.awt.Dimension(140, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        jPanelFilms.add(jTextFieldFilmTitle, gridBagConstraints);

        jTextFieldFilmID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldFilmID.setMinimumSize(new java.awt.Dimension(140, 24));
        jTextFieldFilmID.setPreferredSize(new java.awt.Dimension(140, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 0, 0, 0);
        jPanelFilms.add(jTextFieldFilmID, gridBagConstraints);

        jLabelFilmYear.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmYear.setText("Year");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 5);
        jPanelFilms.add(jLabelFilmYear, gridBagConstraints);

        jLabelFilmID.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmID.setText("ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 5);
        jPanelFilms.add(jLabelFilmID, gridBagConstraints);

        jLabelFilmTitle.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmTitle.setText("Title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 5);
        jPanelFilms.add(jLabelFilmTitle, gridBagConstraints);

        jLabelFilmCrew.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmCrew.setText("<html>Cast &<br>Crew");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 5);
        jPanelFilms.add(jLabelFilmCrew, gridBagConstraints);

        jLabelFilmSearch.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabelFilmSearch.setText("Film Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelFilms.add(jLabelFilmSearch, gridBagConstraints);

        jButtonFilmSearch.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonFilmSearch.setText("Search");
        jButtonFilmSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilmSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        jPanelFilms.add(jButtonFilmSearch, gridBagConstraints);

        jTextFieldFilmEndYear.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldFilmEndYear.setMinimumSize(new java.awt.Dimension(50, 24));
        jTextFieldFilmEndYear.setPreferredSize(new java.awt.Dimension(50, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 5);
        jPanelFilms.add(jTextFieldFilmEndYear, gridBagConstraints);

        jLabelFilmRating.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmRating.setText("Rating");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 5);
        jPanelFilms.add(jLabelFilmRating, gridBagConstraints);

        jLabelFilmCountry.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmCountry.setText("Country");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 5);
        jPanelFilms.add(jLabelFilmCountry, gridBagConstraints);

        jComboBoxFilmRating.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any" }));
        jComboBoxFilmRating.setMinimumSize(new java.awt.Dimension(140, 24));
        jComboBoxFilmRating.setPreferredSize(new java.awt.Dimension(140, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        jPanelFilms.add(jComboBoxFilmRating, gridBagConstraints);

        jComboBoxFilmCountry.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any" }));
        jComboBoxFilmCountry.setMinimumSize(new java.awt.Dimension(140, 24));
        jComboBoxFilmCountry.setPreferredSize(new java.awt.Dimension(140, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        jPanelFilms.add(jComboBoxFilmCountry, gridBagConstraints);

        jLabelFilmGenre.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmGenre.setText("Genre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 5);
        jPanelFilms.add(jLabelFilmGenre, gridBagConstraints);

        jTextFieldFilmCrew.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldFilmCrew.setMinimumSize(new java.awt.Dimension(140, 24));
        jTextFieldFilmCrew.setPreferredSize(new java.awt.Dimension(140, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        jPanelFilms.add(jTextFieldFilmCrew, gridBagConstraints);

        jComboBoxFilmGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any" }));
        jComboBoxFilmGenre.setMinimumSize(new java.awt.Dimension(140, 24));
        jComboBoxFilmGenre.setPreferredSize(new java.awt.Dimension(140, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        jPanelFilms.add(jComboBoxFilmGenre, gridBagConstraints);

        jLabelFilmError.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelFilmError.setForeground(new java.awt.Color(255, 0, 51));
        jLabelFilmError.setFocusable(false);
        jLabelFilmError.setMaximumSize(new java.awt.Dimension(140, 50));
        jLabelFilmError.setMinimumSize(new java.awt.Dimension(140, 16));
        jLabelFilmError.setPreferredSize(new java.awt.Dimension(140, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 20, 0, 0);
        jPanelFilms.add(jLabelFilmError, gridBagConstraints);

        jTextFieldFilmStartYear.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldFilmStartYear.setMinimumSize(new java.awt.Dimension(50, 24));
        jTextFieldFilmStartYear.setPreferredSize(new java.awt.Dimension(50, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 5, 0, 0);
        jPanelFilms.add(jTextFieldFilmStartYear, gridBagConstraints);

        jLabelFilmYearSeparator.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelFilmYearSeparator.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanelFilms.add(jLabelFilmYearSeparator, gridBagConstraints);

        jPanelSearchView.add(jPanelFilms, "films");

        jPanelRentals.setBackground(new java.awt.Color(250, 250, 250));
        jPanelRentals.setLayout(new java.awt.GridBagLayout());

        jTableRentals.setAutoCreateRowSorter(true);
        jTableRentals.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTableRentals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FilmrentalID", "Customer", "Customer ID", "Items", "Due date", "Returned"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableRentals.setFillsViewportHeight(true);
        jTableRentals.setRowHeight(20);
        jTableRentals.setShowGrid(true);
        jTableRentals.setShowHorizontalLines(false);
        jTableRentals.getTableHeader().setReorderingAllowed(false);
        jTableRentals.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRentalsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableRentals);
        if (jTableRentals.getColumnModel().getColumnCount() > 0) {
            jTableRentals.getColumnModel().getColumn(0).setMinWidth(0);
            jTableRentals.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTableRentals.getColumnModel().getColumn(0).setMaxWidth(0);
            jTableRentals.getColumnModel().getColumn(2).setMinWidth(80);
            jTableRentals.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTableRentals.getColumnModel().getColumn(2).setMaxWidth(80);
            jTableRentals.getColumnModel().getColumn(3).setMinWidth(80);
            jTableRentals.getColumnModel().getColumn(3).setPreferredWidth(80);
            jTableRentals.getColumnModel().getColumn(3).setMaxWidth(80);
            jTableRentals.getColumnModel().getColumn(4).setMinWidth(120);
            jTableRentals.getColumnModel().getColumn(4).setPreferredWidth(120);
            jTableRentals.getColumnModel().getColumn(4).setMaxWidth(120);
            jTableRentals.getColumnModel().getColumn(5).setMinWidth(80);
            jTableRentals.getColumnModel().getColumn(5).setPreferredWidth(80);
            jTableRentals.getColumnModel().getColumn(5).setMaxWidth(80);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 20);
        jPanelRentals.add(jScrollPane3, gridBagConstraints);

        jButtonRentalSearch.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonRentalSearch.setText("Search");
        jButtonRentalSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRentalSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelRentals.add(jButtonRentalSearch, gridBagConstraints);

        jButtonRentalReturn.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonRentalReturn.setText("Mark as Returned");
        jButtonRentalReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRentalReturnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 20);
        jPanelRentals.add(jButtonRentalReturn, gridBagConstraints);

        jLabelRentalCustomerID.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelRentalCustomerID.setText("Customer ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelRentals.add(jLabelRentalCustomerID, gridBagConstraints);

        jLabelRentalCustomerName.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelRentalCustomerName.setText("Customer Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        jPanelRentals.add(jLabelRentalCustomerName, gridBagConstraints);

        jTextFieldRentalCustomerID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldRentalCustomerID.setMinimumSize(new java.awt.Dimension(140, 22));
        jTextFieldRentalCustomerID.setPreferredSize(new java.awt.Dimension(140, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(18, 5, 0, 0);
        jPanelRentals.add(jTextFieldRentalCustomerID, gridBagConstraints);

        jTextFieldRentalCustomerName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldRentalCustomerName.setMinimumSize(new java.awt.Dimension(140, 22));
        jTextFieldRentalCustomerName.setPreferredSize(new java.awt.Dimension(140, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        jPanelRentals.add(jTextFieldRentalCustomerName, gridBagConstraints);

        jCheckBoxUnreturned.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jCheckBoxUnreturned.setText("Unreturned");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        jPanelRentals.add(jCheckBoxUnreturned, gridBagConstraints);

        jCheckBoxRentalOverdue.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jCheckBoxRentalOverdue.setText("Overdue");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 0);
        jPanelRentals.add(jCheckBoxRentalOverdue, gridBagConstraints);

        jSliderRentalTime.setMajorTickSpacing(10);
        jSliderRentalTime.setMaximum(60);
        jSliderRentalTime.setMinorTickSpacing(1);
        jSliderRentalTime.setPaintLabels(true);
        jSliderRentalTime.setPaintTicks(true);
        jSliderRentalTime.setSnapToTicks(true);
        jSliderRentalTime.setValue(60);
        jSliderRentalTime.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 0);
        jPanelRentals.add(jSliderRentalTime, gridBagConstraints);

        jLabelRentalDayLimit.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelRentalDayLimit.setText("Limit Search (Days)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelRentals.add(jLabelRentalDayLimit, gridBagConstraints);

        jCheckBoxRentalUnlimitedSearch.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jCheckBoxRentalUnlimitedSearch.setSelected(true);
        jCheckBoxRentalUnlimitedSearch.setText("No Time Limit");
        jCheckBoxRentalUnlimitedSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRentalUnlimitedSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 0);
        jPanelRentals.add(jCheckBoxRentalUnlimitedSearch, gridBagConstraints);

        jLabelRentalSearch.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabelRentalSearch.setText("Rental Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelRentals.add(jLabelRentalSearch, gridBagConstraints);

        jPanelSearchView.add(jPanelRentals, "rentals");

        jPanelCrew.setBackground(new java.awt.Color(250, 250, 250));
        jPanelCrew.setLayout(new java.awt.GridBagLayout());

        jLabelCrewName.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelCrewName.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        jPanelCrew.add(jLabelCrewName, gridBagConstraints);

        jLabelCrewID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelCrewID.setText("ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelCrew.add(jLabelCrewID, gridBagConstraints);

        jTextFieldCrewID.setMinimumSize(new java.awt.Dimension(140, 20));
        jTextFieldCrewID.setPreferredSize(new java.awt.Dimension(140, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(18, 5, 0, 0);
        jPanelCrew.add(jTextFieldCrewID, gridBagConstraints);

        jTextFieldCrewName.setMinimumSize(new java.awt.Dimension(140, 20));
        jTextFieldCrewName.setPreferredSize(new java.awt.Dimension(140, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        jPanelCrew.add(jTextFieldCrewName, gridBagConstraints);

        jTextFieldCrewFilm.setMinimumSize(new java.awt.Dimension(140, 20));
        jTextFieldCrewFilm.setPreferredSize(new java.awt.Dimension(140, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 5, 0, 0);
        jPanelCrew.add(jTextFieldCrewFilm, gridBagConstraints);

        jTableCrew.setAutoCreateRowSorter(true);
        jTableCrew.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTableCrew.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Date of Birth", "Films"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCrew.setFillsViewportHeight(true);
        jTableCrew.setRowHeight(20);
        jTableCrew.setShowGrid(true);
        jTableCrew.setShowHorizontalLines(false);
        jTableCrew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCrewMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTableCrew);
        if (jTableCrew.getColumnModel().getColumnCount() > 0) {
            jTableCrew.getColumnModel().getColumn(0).setMinWidth(80);
            jTableCrew.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTableCrew.getColumnModel().getColumn(0).setMaxWidth(80);
            jTableCrew.getColumnModel().getColumn(3).setMinWidth(80);
            jTableCrew.getColumnModel().getColumn(3).setPreferredWidth(80);
            jTableCrew.getColumnModel().getColumn(3).setMaxWidth(80);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 20);
        jPanelCrew.add(jScrollPane4, gridBagConstraints);

        jButtonCrewSearch.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonCrewSearch.setText("<html><center>Search<br>Cast & Crew</center>");
        jButtonCrewSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonCrewSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCrewSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 0, 0);
        jPanelCrew.add(jButtonCrewSearch, gridBagConstraints);

        jLabelCrewFilm.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelCrewFilm.setText("Film");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanelCrew.add(jLabelCrewFilm, gridBagConstraints);

        jButtonDeleteCrew.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonDeleteCrew.setText("Delete Crew");
        jButtonDeleteCrew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteCrewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 20);
        jPanelCrew.add(jButtonDeleteCrew, gridBagConstraints);

        jLabelCrewSearch.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabelCrewSearch.setText("Cast & Crew Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelCrew.add(jLabelCrewSearch, gridBagConstraints);

        jPanelSearchView.add(jPanelCrew, "crew");

        jPanelReviews.setLayout(new java.awt.GridBagLayout());

        jTableReviews.setAutoCreateRowSorter(true);
        jTableReviews.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTableReviews.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ReviewID", "CustomerID", "Reviewer", "Film", "Stars", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableReviews.setFillsViewportHeight(true);
        jTableReviews.setRowHeight(20);
        jTableReviews.setShowGrid(false);
        jTableReviews.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableReviewsMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTableReviews);
        if (jTableReviews.getColumnModel().getColumnCount() > 0) {
            jTableReviews.getColumnModel().getColumn(0).setMinWidth(0);
            jTableReviews.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTableReviews.getColumnModel().getColumn(0).setMaxWidth(0);
            jTableReviews.getColumnModel().getColumn(1).setMinWidth(0);
            jTableReviews.getColumnModel().getColumn(1).setPreferredWidth(0);
            jTableReviews.getColumnModel().getColumn(1).setMaxWidth(0);
            jTableReviews.getColumnModel().getColumn(4).setMinWidth(80);
            jTableReviews.getColumnModel().getColumn(4).setPreferredWidth(80);
            jTableReviews.getColumnModel().getColumn(4).setMaxWidth(80);
            jTableReviews.getColumnModel().getColumn(5).setMinWidth(180);
            jTableReviews.getColumnModel().getColumn(5).setPreferredWidth(180);
            jTableReviews.getColumnModel().getColumn(5).setMaxWidth(180);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        jPanelReviews.add(jScrollPane5, gridBagConstraints);

        jButtonDeleteReview.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonDeleteReview.setText("Delete Review");
        jButtonDeleteReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteReviewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 20, 20);
        jPanelReviews.add(jButtonDeleteReview, gridBagConstraints);

        jLabelReviewCustomerID.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelReviewCustomerID.setText("Customer ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelReviews.add(jLabelReviewCustomerID, gridBagConstraints);

        jLabelReviewCustomerName.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelReviewCustomerName.setText("Customer Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        jPanelReviews.add(jLabelReviewCustomerName, gridBagConstraints);

        jLabelReviewFilmID.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelReviewFilmID.setText("Film ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelReviews.add(jLabelReviewFilmID, gridBagConstraints);

        jLabelReviewFilmName.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabelReviewFilmName.setText("Film Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        jPanelReviews.add(jLabelReviewFilmName, gridBagConstraints);

        jButtonReviewSearch.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButtonReviewSearch.setText("Search");
        jButtonReviewSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReviewSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 0, 0);
        jPanelReviews.add(jButtonReviewSearch, gridBagConstraints);

        jTextFieldReviewCustomerID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldReviewCustomerID.setMinimumSize(new java.awt.Dimension(80, 22));
        jTextFieldReviewCustomerID.setPreferredSize(new java.awt.Dimension(80, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 0, 0);
        jPanelReviews.add(jTextFieldReviewCustomerID, gridBagConstraints);

        jTextFieldReviewFilmName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldReviewFilmName.setMinimumSize(new java.awt.Dimension(120, 22));
        jTextFieldReviewFilmName.setPreferredSize(new java.awt.Dimension(120, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanelReviews.add(jTextFieldReviewFilmName, gridBagConstraints);

        jTextFieldReviewFilmID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldReviewFilmID.setMinimumSize(new java.awt.Dimension(80, 22));
        jTextFieldReviewFilmID.setPreferredSize(new java.awt.Dimension(80, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 0, 0);
        jPanelReviews.add(jTextFieldReviewFilmID, gridBagConstraints);

        jTextFieldReviewCustomerName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jTextFieldReviewCustomerName.setMinimumSize(new java.awt.Dimension(120, 22));
        jTextFieldReviewCustomerName.setPreferredSize(new java.awt.Dimension(120, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanelReviews.add(jTextFieldReviewCustomerName, gridBagConstraints);

        jLabelReviewSearch.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabelReviewSearch.setText("Review Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanelReviews.add(jLabelReviewSearch, gridBagConstraints);

        jPanelSearchView.add(jPanelReviews, "reviews");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanelMainView.add(jPanelSearchView, gridBagConstraints);

        getContentPane().add(jPanelMainView, java.awt.BorderLayout.CENTER);

        jMenuFile.setText("File");

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBarMenu.add(jMenuFile);

        jMenuEdit.setText("Edit");

        jMenuItemAddUser.setText("Add Customer");
        jMenuItemAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddUserActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemAddUser);

        jMenuItemAddFilm.setText("Add Film");
        jMenuEdit.add(jMenuItemAddFilm);

        jMenuItemAddCrew.setText("Add Crew");
        jMenuItemAddCrew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddCrewActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemAddCrew);
        jMenuEdit.add(jSeparator1);

        jMenuItemCrewRole.setText("Edit Crew Roles");
        jMenuItemCrewRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCrewRoleActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemCrewRole);

        jMenuItemRatings.setText("Edit Age Ratings");
        jMenuItemRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRatingsActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemRatings);

        jMenuItemEditKeywords.setText("Edit Age Rating Keywords");
        jMenuItemEditKeywords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditKeywordsActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemEditKeywords);

        jMenuStudios.setText("Edit Studios");
        jMenuStudios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuStudiosActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuStudios);

        jMenuItemLanguages.setText("Edit Languages");
        jMenuItemLanguages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLanguagesActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemLanguages);

        jMenuItemGenres.setText("Edit Genres");
        jMenuItemGenres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGenresActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemGenres);

        jMenuItemMedia.setText("Edit Media");
        jMenuItemMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMediaActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemMedia);

        jMenuItemCountries.setText("Edit Countries");
        jMenuItemCountries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCountriesActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemCountries);

        jMenuItemTypes.setText("Edit Film Types");
        jMenuItemTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTypesActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemTypes);

        jMenuItemMethods.setText("Edit Payment Methods");
        jMenuItemMethods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMethodsActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemMethods);

        jMenuBarMenu.add(jMenuEdit);

        jMenu3.setText("Connection");

        jMenuItemDBTest.setText("Test Connection");
        jMenuItemDBTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDBTestActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemDBTest);

        jMenuBarMenu.add(jMenu3);

        setJMenuBar(jMenuBarMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSearchSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSearchSelectActionPerformed
        String newView = (String) jComboBoxSearchSelect.getSelectedItem();
        CardLayout layout = (CardLayout) jPanelSearchView.getLayout();

        switch (newView) {
            case "Customers":
                layout.show(jPanelSearchView, "customers");
                getRootPane().setDefaultButton(jButtonCustomerSearch);
                break;
            case "Films":
                layout.show(jPanelSearchView, "films");
                getRootPane().setDefaultButton(jButtonFilmSearch);
                break;
            case "-":
                layout.show(jPanelSearchView, "start");
                break;
            case "Rentals":
                layout.show(jPanelSearchView, "rentals");
                break;
            case "Cast & Crew":
                layout.show(jPanelSearchView, "crew");
                break;
            case "Reviews":
                layout.show(jPanelSearchView, "reviews");
                break;
        }
    }//GEN-LAST:event_jComboBoxSearchSelectActionPerformed

    private void jTableCustomersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCustomersMouseClicked
        if (evt.getClickCount() > 1) {
            int selectedRow = jTableCustomers.getSelectedRow();
            if (selectedRow != -1) {
                int userID = (int) Utils.getSelectedCellContent(selectedRow, 0, jTableCustomers);
                addUser(userID);
            }
        }
    }//GEN-LAST:event_jTableCustomersMouseClicked

    private void jButtonCustomerSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCustomerSearchActionPerformed
        jLabelCustomerError.setText("");

        String sql = "SELECT Customer.CustomerID, CONCAT(Customer.Lastname, ', ', Customer.Firstname) AS 'Name', COUNT(Filmrental.FilmrentalID) FROM Customer"
                + " LEFT JOIN Filmrental USING(CustomerID) ";

        String ID = jTextFieldCustomerID.getText();
        String[] names = Utils.splitByLastName(jTextFieldCustomerName.getText());
        ArrayList<String> conditions = new ArrayList<>();
        ArrayList<Object> data = new ArrayList<>();

        if (!ID.matches("\\d+") && !ID.isEmpty()) {
            jLabelCustomerError.setText("<html>The ID value must be an integer.");
            return;
        }

        if (jCheckBoxOverdue.isSelected()) {
            conditions.add("(DATEDIFF(CURDATE(), Rentdate) > Rentlength AND Returned = false)");
        }
        if (!ID.isEmpty()) {
            conditions.add("Customer.CustomerID = ?");
            data.add(Integer.valueOf(ID));
        } else if (names.length == 1 && !names[0].isEmpty()) {
            conditions.add("(Firstname = ? OR Lastname = ?)");
            data.add(names[0]);
            data.add(names[0]);
        } else if (names.length == 2) {
            conditions.add("Firstname = ?");
            conditions.add("Lastname = ?");
            data.add(names[0]);
            data.add(names[1]);
        } else if (!jCheckBoxOverdue.isSelected()) {
            conditions.add("1");
        }

        sql += Utils.buildWhere(conditions);
        sql += " GROUP BY CustomerID;";

        DB.connect();
        customerResults = DB.makeQuery(sql, data);
        DB.close();

        jTableCustomers.removeAll();
        Utils.populateTable(jTableCustomers, customerResults);
    }//GEN-LAST:event_jButtonCustomerSearchActionPerformed

    private void jTableFilmsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFilmsMouseClicked
        int selected = jTableFilms.getSelectedRow();
        if (evt.getClickCount() < 2 || selected == -1) {
            return;
        }
        Integer filmID = (Integer) Utils.getSelectedCellContent(selected, 0, jTableFilms);

        ViewFilm newWindow = new ViewFilm(filmID.intValue(), DB);
        newWindow.setLocationRelativeTo(this);
        newWindow.setVisible(true);
    }//GEN-LAST:event_jTableFilmsMouseClicked

    private void jButtonFilmSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilmSearchActionPerformed

        jLabelFilmError.setText("");

        String sql = "SELECT Film.FilmID, Film.Title, Rating.Designation, Film.Year FROM Film"
                + " LEFT JOIN Filmcountry USING(FilmID)"
                + " LEFT JOIN Country USING(CountryID)"
                + " LEFT JOIN Filmgenre USING(FilmID)"
                + " LEFT JOIN Genre USING(GenreID)"
                + " LEFT JOIN Crewrole USING(FilmID)"
                + " LEFT JOIN Crew Using(CrewID)"
                + " LEFT JOIN Rating USING(RatingID)";

        String ID = jTextFieldFilmID.getText();
        String title = jTextFieldFilmTitle.getText();
        String startYear = jTextFieldFilmStartYear.getText();
        String endYear = jTextFieldFilmEndYear.getText();
        String country = Utils.getSelectedID((String) jComboBoxFilmCountry.getSelectedItem());
        String genre = Utils.getSelectedID((String) jComboBoxFilmGenre.getSelectedItem());
        String rating = Utils.getSelectedID((String) jComboBoxFilmRating.getSelectedItem());
        String[] crewNames = Utils.splitByLastName(jTextFieldFilmCrew.getText());

        ArrayList<String> conditions = new ArrayList<>();
        ArrayList<Object> data = new ArrayList<>();

        if (!ID.matches("\\d+") && !ID.isEmpty()) {
            jLabelFilmError.setText("<html>The ID value must be an integer.");
            return;
        }

        if (!ID.isEmpty()) {
            conditions.add("Film.FilmID = ?");
            data.add(Integer.valueOf(ID));
        } else {
            if (!title.isEmpty()) {
                conditions.add("Film.Title LIKE ?");
                data.add("%" + title + "%");
            }

            if (startYear.isEmpty() && !endYear.isEmpty()) {
                conditions.add("Film.Year = ?");
                data.add(Integer.valueOf(endYear));
            } else if (!startYear.isEmpty() && endYear.isEmpty()) {
                conditions.add("Film.Year = ?");
                data.add(Integer.valueOf(startYear));
            } else if (!startYear.isEmpty() && !endYear.isEmpty()) {
                conditions.add("(Film.Year BETWEEN ? AND ?)");
                data.add(Integer.valueOf(startYear));
                data.add(Integer.valueOf(endYear));
            }

            if (!country.isEmpty()) {
                conditions.add("Country.CountryID = ?");
                data.add(Integer.valueOf(country));
            }
            if (!genre.isEmpty()) {
                conditions.add("Genre.GenreID = ?");
                data.add(Integer.valueOf(genre));
            }
            if (!rating.isEmpty()) {
                conditions.add("Rating.RatingID = ?");
                data.add(Integer.valueOf(rating));
            }

            if (crewNames.length == 1 && !crewNames[0].isEmpty()) {
                conditions.add("(Crew.Firstname = ? OR Crew.Lastname = ?)");
                data.add(crewNames[0]);
                data.add(crewNames[0]);
            } else if (crewNames.length == 2) {
                conditions.add("Crew.Firstname = ?");
                conditions.add("Crew.Lastname = ?");
                data.add(crewNames[0]);
                data.add(crewNames[1]);
            }
        }
        if (conditions.isEmpty()) {
            conditions.add("1");
        }

        sql += Utils.buildWhere(conditions) + " GROUP BY FilmID;";

        DB.connect();
        ResultSet filmResults = DB.makeQuery(sql, data);
        DB.close();

        jTableCustomers.removeAll();
        Utils.populateTable(jTableFilms, filmResults);
    }//GEN-LAST:event_jButtonFilmSearchActionPerformed

    private void jButtonAddFilmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddFilmActionPerformed
        JFrame newFrame = new AddFilm(0, DB);
        newFrame.setLocationRelativeTo(this);
        newFrame.setVisible(true);
    }//GEN-LAST:event_jButtonAddFilmActionPerformed

    private void jButtonAddCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCustomerActionPerformed
        addUser(0);
    }//GEN-LAST:event_jButtonAddCustomerActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        DB.close();
        closeWindow();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jButtonAddCrewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCrewActionPerformed
        addCrew(0);
    }//GEN-LAST:event_jButtonAddCrewActionPerformed

    private void jButtonRentalSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRentalSearchActionPerformed
        jTextFieldRentalCustomerID.setForeground(Color.black);

        String customerID = jTextFieldRentalCustomerID.getText();
        String customerName = jTextFieldRentalCustomerName.getText();
        String[] names = Utils.splitByLastName(customerName);
        boolean noTimeLimit = jCheckBoxRentalUnlimitedSearch.isSelected();
        int dayLimit = jSliderRentalTime.getValue();
        boolean unreturned = jCheckBoxUnreturned.isSelected();
        boolean overdue = jCheckBoxRentalOverdue.isSelected();

        if (!customerID.matches("\\d*")) {
            jTextFieldRentalCustomerID.setForeground(Color.red);
            return;
        }

        String sql = "SELECT Filmrental.FilmrentalID, CONCAT(Customer.Firstname,' ',Customer.Lastname), Customer.CustomerID,"
                + " COUNT(Rentalitem.RentalitemID), ADDDATE(Filmrental.Rentdate, Filmrental.Rentlength), Filmrental.Returned"
                + " From Filmrental INNER JOIN Customer USING(CustomerID)"
                + " INNER JOIN Rentalitem USING(FilmrentalID)";

        ArrayList<String> conditions = new ArrayList<>();
        ArrayList<Object> data = new ArrayList<>();

        if (customerID.isBlank() && customerName.isBlank() && noTimeLimit && !unreturned && !overdue) {
            conditions.add("1");
        } else {
            if (!customerID.isBlank()) {
                conditions.add("CustomerID = ?");
                data.add(Integer.valueOf(customerID));
            } else if (names.length == 1 && !names[0].isEmpty()) {
                conditions.add("(Firstname = ? OR Lastname = ?)");
                data.add(names[0]);
                data.add(names[0]);
            } else if (names.length == 2) {
                conditions.add("Firstname = ?");
                conditions.add("Lastname = ?");
                data.add(names[0]);
                data.add(names[1]);
            }
            if (!noTimeLimit) {
                conditions.add("CURDATE() - Filmrental.Rentdate <= ?");
                data.add(Integer.valueOf(dayLimit));
            }
            if (unreturned) {
                conditions.add("Filmrental.Returned = 0");
            }
            if (overdue) {
                conditions.add("Filmrental.Returned = 0 AND ADDDATE(Filmrental.Rentdate, Filmrental.Rentlength) < CURDATE()");
            }
        }
        
        sql += Utils.buildWhere(conditions);
        sql += " GROUP BY FilmrentalID";

        DB.connect();
        ResultSet result = DB.makeQuery(sql, data);
        DB.close();

        Utils.populateTable(jTableRentals, result);
    }//GEN-LAST:event_jButtonRentalSearchActionPerformed

    private void jButtonAddRentalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddRentalActionPerformed
        int selectedRow = jTableCustomers.getSelectedRow();
        if (selectedRow == -1) {
            return;
        }
        int customerID = (int) Utils.getSelectedCellContent(selectedRow, 0, jTableCustomers);
        AddRental newRental = new AddRental(DB, customerID);
        newRental.setLocationRelativeTo(this);
        newRental.setVisible(true);
    }//GEN-LAST:event_jButtonAddRentalActionPerformed

    private void jMenuItemAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddUserActionPerformed
        addUser(0);
    }//GEN-LAST:event_jMenuItemAddUserActionPerformed

    private void jMenuItemAddCrewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddCrewActionPerformed
        addCrew(0);
    }//GEN-LAST:event_jMenuItemAddCrewActionPerformed

    private void jButtonCrewSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrewSearchActionPerformed
        jLabelCrewID.setForeground(Color.BLACK);

        String crewID = jTextFieldCrewID.getText();
        String crewName = jTextFieldCrewName.getText();
        String filmName = jTextFieldCrewFilm.getText();

        if (!crewID.isBlank() && !crewID.matches("\\d+")) {
            jLabelCrewID.setForeground(Color.red);
            return;
        }

        String sql = "SELECT Crew.CrewID, CONCAT(Crew.Firstname, ' ', Crew.Lastname), Crew.DOB, COUNT(Film.FilmID) FROM Crew"
                + " LEFT JOIN Crewrole USING (CrewID)"
                + " LEFT JOIN Film USING (FilmID)";

        ArrayList<String> searchElements = new ArrayList<>();
        ArrayList<Object> data = new ArrayList<>();

        if (crewID.isBlank() && crewName.isBlank() && filmName.isBlank()) {
            searchElements.add("1");
        } else if (!crewID.isBlank()) {
            searchElements.add("Crew.CrewID = ?");
            data.add(Integer.valueOf(crewID));
        } else {
            if (!crewName.isBlank()) {
                String[] names = Utils.splitByLastName(crewName);
                if (names.length > 1) {
                    searchElements.add("Crew.Firstname = ? AND Crew.Lastname = ?");
                    data.add(names[0]);
                    data.add(names[1]);
                }
                if (names.length == 1) {
                    searchElements.add("(Crew.Firstname = ? OR Crew.Lastname = ?)");
                    data.add(names[0]);
                    data.add(names[0]);
                }
            }
            if (!filmName.isBlank()) {
                searchElements.add("Film.Title LIKE ?");
                data.add("%" + filmName + "%");
            }
        }
        sql += Utils.buildWhere(searchElements) + " GROUP BY CrewID;";

        DB.connect();
        ResultSet result = DB.makeQuery(sql, data);
        DB.close();

        Utils.populateTable(jTableCrew, result);
    }//GEN-LAST:event_jButtonCrewSearchActionPerformed

    private void jTableCrewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCrewMouseClicked
        if (evt.getClickCount() > 1) {
            int selectedIndex = jTableCrew.getSelectedRow();
            if (selectedIndex == -1) {
                return;
            }
            CrewInfo crewEdit = new CrewInfo(DB, (int) Utils.getSelectedCellContent(selectedIndex, 0, jTableCrew));
            crewEdit.setLocationRelativeTo(this);
            crewEdit.setVisible(true);
        }
    }//GEN-LAST:event_jTableCrewMouseClicked

    private void jButtonDeleteCrewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteCrewActionPerformed
        int selectedIndex = jTableCrew.getSelectedRow();
        if (selectedIndex == -1) {
            return;
        }
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this entry?", "Deleting Cast/Crew", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            String sql = "DELETE FROM Crew WHERE CrewID=?;";
            ArrayList<Object> data = new ArrayList<>();
            data.add(Utils.getSelectedCellContent(selectedIndex, 0, jTableCrew));

            DB.connect();
            DB.makeQuery(sql, data);
            DB.close();

            Utils.removeTableEntry(jTableCrew, selectedIndex);
        }
    }//GEN-LAST:event_jButtonDeleteCrewActionPerformed

    private void jButtonDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteCustomerActionPerformed
        int selectedIndex = jTableCustomers.getSelectedRow();
        if (selectedIndex == -1) {
            return;
        }
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this entry?", "Deleting Customer", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            String sql = "DELETE FROM Customer WHERE CustomerID=?;";
            ArrayList<Object> data = new ArrayList<>();
            data.add(Utils.getSelectedCellContent(selectedIndex, 0, jTableCustomers));

            DB.connect();
            DB.makeQuery(sql, data);
            DB.close();

            Utils.removeTableEntry(jTableCustomers, selectedIndex);
        }
    }//GEN-LAST:event_jButtonDeleteCustomerActionPerformed

    private void jButtonRentalReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRentalReturnActionPerformed
        int selectedIndex = jTableRentals.getSelectedRow();
        if (selectedIndex == -1) {
            return;
        }
        Integer rentalID = (Integer) Utils.getSelectedCellContent(selectedIndex, 0, jTableRentals);
        ArrayList<Object> data = new ArrayList<>();
        data.add(rentalID);

        String sql = "UPDATE Filmrental set Returned = 1 WHERE FilmrentalID = ?;";
        DB.connect();
        DB.makeQuery(sql, data);
        DB.close();

        Utils.setSelectedCellContent(selectedIndex, 5, jTableRentals, "true");
    }//GEN-LAST:event_jButtonRentalReturnActionPerformed

    private void jCheckBoxRentalUnlimitedSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRentalUnlimitedSearchActionPerformed
        if (jSliderRentalTime.isEnabled()) {
            jSliderRentalTime.setEnabled(false);
        } else {
            jSliderRentalTime.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxRentalUnlimitedSearchActionPerformed

    private void jMenuItemCrewRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCrewRoleActionPerformed
        EditCrewRoles roles = new EditCrewRoles(DB);
        roles.setLocationRelativeTo(this);
        roles.setVisible(true);
    }//GEN-LAST:event_jMenuItemCrewRoleActionPerformed

    private void jMenuItemRatingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRatingsActionPerformed
        EditRatings ratings = new EditRatings(DB);
        ratings.setLocationRelativeTo(this);
        ratings.setVisible(true);
    }//GEN-LAST:event_jMenuItemRatingsActionPerformed

    private void jMenuItemDBTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDBTestActionPerformed
        if (DB.test()) {
            JOptionPane.showMessageDialog(this, "The Database connection is working.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Connection to Database failed.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemDBTestActionPerformed

    private void jMenuItemEditKeywordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditKeywordsActionPerformed
        EditKeywords keywords = new EditKeywords(DB);
        keywords.setLocationRelativeTo(this);
        keywords.setVisible(true);
    }//GEN-LAST:event_jMenuItemEditKeywordsActionPerformed

    private void jMenuStudiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuStudiosActionPerformed
        EditStudios studios = new EditStudios(DB);
        studios.setLocationRelativeTo(this);
        studios.setVisible(true);
    }//GEN-LAST:event_jMenuStudiosActionPerformed

    private void jMenuItemLanguagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLanguagesActionPerformed
        EditLanguages languages = new EditLanguages(DB);
        languages.setLocationRelativeTo(this);
        languages.setVisible(true);
    }//GEN-LAST:event_jMenuItemLanguagesActionPerformed

    private void jMenuItemGenresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGenresActionPerformed
        EditGenres genres = new EditGenres(DB);
        genres.setLocationRelativeTo(this);
        genres.setVisible(true);
    }//GEN-LAST:event_jMenuItemGenresActionPerformed

    private void jMenuItemMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMediaActionPerformed
        EditMedia media = new EditMedia(DB);
        media.setLocationRelativeTo(this);
        media.setVisible(true);
    }//GEN-LAST:event_jMenuItemMediaActionPerformed

    private void jMenuItemCountriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCountriesActionPerformed
        EditCountries countries = new EditCountries(DB);
        countries.setLocationRelativeTo(this);
        countries.setVisible(true);
    }//GEN-LAST:event_jMenuItemCountriesActionPerformed

    private void jTableRentalsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRentalsMouseClicked
        if (evt.getClickCount() > 1) {
            int selectedRow = jTableRentals.getSelectedRow();
            if (selectedRow < 0) {
                return;
            }
            Integer rentalID = (Integer) Utils.getSelectedCellContent(selectedRow, 0, jTableRentals);
            ViewRental rental = new ViewRental(DB, rentalID);
            rental.setLocationRelativeTo(this);
            rental.setVisible(true);
        }
    }//GEN-LAST:event_jTableRentalsMouseClicked

    private void jMenuItemTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTypesActionPerformed
        EditFilmTypes types = new EditFilmTypes(DB);
        types.setLocationRelativeTo(this);
        types.setVisible(true);
    }//GEN-LAST:event_jMenuItemTypesActionPerformed

    private void jMenuItemMethodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMethodsActionPerformed
        EditPaymentMethods methods = new EditPaymentMethods(DB);
        methods.setLocationRelativeTo(this);
        methods.setVisible(true);
    }//GEN-LAST:event_jMenuItemMethodsActionPerformed

    private void jButtonReviewSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReviewSearchActionPerformed
        jLabelReviewCustomerID.setForeground(Color.black);
        jLabelReviewFilmID.setForeground(Color.black);
        
        String customerID = jTextFieldRentalCustomerID.getText();
        String customerName = jTextFieldReviewCustomerName.getText();
        String filmID = jTextFieldReviewFilmID.getText();
        String filmName = jTextFieldReviewFilmName.getText();
        
        //make sure any text entered into either ID field is an integer number
        if (!customerID.isBlank() && !customerID.matches("\\d+")) {
            jLabelReviewCustomerID.setForeground(Color.red);
            return;
        }
        if (!filmID.isBlank() && !filmID.matches("\\d+")) {
            jLabelReviewFilmID.setForeground(Color.red);
            return;
        }
        
        
        String sql = "SELECT Review.ReviewID, Customer.CustomerID, CONCAT(Customer.FirstName,' ',Customer.Lastname), Film.Title, Review.Stars, Review.Time FROM Review"
                + " INNER JOIN Customer USING (CustomerID)"
                + " INNER JOIN Film Using(FilmID)";
        
        ArrayList<String> elements = new ArrayList<>();
        ArrayList<Object> data = new ArrayList<>();
        
        //if all fields are blank, get everything
        if (customerID.isBlank() && customerName.isBlank() && filmID.isBlank() && filmName.isBlank()) {
            elements.add("1");
        } else {
            if (!customerID.isBlank()) {
                elements.add("Customer.CustomerID = ?");
                data.add(Integer.valueOf(customerID));
            }
            if (!filmID.isBlank()) {
                elements.add("Film.FilmID = ?");
                data.add(Integer.valueOf(filmID));
            }
            if (!customerName.isBlank()) {
                String[] names = Utils.splitByLastName(customerName);
                if (names.length == 1) {
                    elements.add("(Customer.Firstname = ? OR Customer.Lastname = ?)");
                    data.add(names[0]);
                    data.add(names[0]);
                } else {
                    elements.add("(Customer.Firstname = ? AND Customer.Lastname = ?)");
                    data.add(names[0]);
                    data.add(names[1]);
                }
            }
            if(!filmName.isBlank()) {
                elements.add("Film.Title LIKE ?");
                data.add("%" + filmName + "%");
            }
        }
        
        sql += Utils.buildWhere(elements) + ";";
       
        DB.connect();
        ResultSet result = DB.makeQuery(sql, data);
        DB.close();
        
        Utils.populateTable(jTableReviews, result);
    }//GEN-LAST:event_jButtonReviewSearchActionPerformed

    private void jButtonDeleteReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteReviewActionPerformed
        int selectedIndex = jTableReviews.getSelectedRow();
        if (selectedIndex == -1) {
            return;
        }
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this review?", "Deleting Review", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            String sql = "DELETE FROM Review WHERE ReviewID=?;";
            ArrayList<Object> data = new ArrayList<>();
            data.add(Utils.getSelectedCellContent(selectedIndex, 0, jTableReviews));

            DB.connect();
            DB.makeQuery(sql, data);
            DB.close();

            Utils.removeTableEntry(jTableReviews, selectedIndex);
        }
    }//GEN-LAST:event_jButtonDeleteReviewActionPerformed

    private void jTableReviewsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableReviewsMouseClicked
        if (evt.getClickCount() < 2) {
            return;
        }
        int selectedRow = jTableReviews.getSelectedRow();
        if (selectedRow == -1) {
            return;
        }
        Integer reviewID = (Integer) Utils.getSelectedCellContent(selectedRow, 0, jTableReviews);
        ViewReview review = new ViewReview(DB, reviewID);
        review.setLocationRelativeTo(this);
        review.setVisible(true);
    }//GEN-LAST:event_jTableReviewsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Metal look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView(null, "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddCrew;
    private javax.swing.JButton jButtonAddCustomer;
    private javax.swing.JButton jButtonAddFilm;
    private javax.swing.JButton jButtonAddRental;
    private javax.swing.JButton jButtonCrewSearch;
    private javax.swing.JButton jButtonCustomerSearch;
    private javax.swing.JButton jButtonDeleteCrew;
    private javax.swing.JButton jButtonDeleteCustomer;
    private javax.swing.JButton jButtonDeleteReview;
    private javax.swing.JButton jButtonFilmSearch;
    private javax.swing.JButton jButtonRentalReturn;
    private javax.swing.JButton jButtonRentalSearch;
    private javax.swing.JButton jButtonReviewSearch;
    private javax.swing.JCheckBox jCheckBoxOverdue;
    private javax.swing.JCheckBox jCheckBoxRentalOverdue;
    private javax.swing.JCheckBox jCheckBoxRentalUnlimitedSearch;
    private javax.swing.JCheckBox jCheckBoxUnreturned;
    private javax.swing.JComboBox<String> jComboBoxFilmCountry;
    private javax.swing.JComboBox<String> jComboBoxFilmGenre;
    private javax.swing.JComboBox<String> jComboBoxFilmRating;
    private javax.swing.JComboBox<String> jComboBoxSearchSelect;
    private javax.swing.JLabel jLabelCrewFilm;
    private javax.swing.JLabel jLabelCrewID;
    private javax.swing.JLabel jLabelCrewName;
    private javax.swing.JLabel jLabelCrewSearch;
    private javax.swing.JLabel jLabelCustomerError;
    private javax.swing.JLabel jLabelCustomerID;
    private javax.swing.JLabel jLabelCustomerName;
    private javax.swing.JLabel jLabelCustomerSearch;
    private javax.swing.JLabel jLabelFilmCountry;
    private javax.swing.JLabel jLabelFilmCrew;
    private javax.swing.JLabel jLabelFilmError;
    private javax.swing.JLabel jLabelFilmGenre;
    private javax.swing.JLabel jLabelFilmID;
    private javax.swing.JLabel jLabelFilmRating;
    private javax.swing.JLabel jLabelFilmSearch;
    private javax.swing.JLabel jLabelFilmTitle;
    private javax.swing.JLabel jLabelFilmYear;
    private javax.swing.JLabel jLabelFilmYearSeparator;
    private javax.swing.JLabel jLabelRentalCustomerID;
    private javax.swing.JLabel jLabelRentalCustomerName;
    private javax.swing.JLabel jLabelRentalDayLimit;
    private javax.swing.JLabel jLabelRentalSearch;
    private javax.swing.JLabel jLabelReviewCustomerID;
    private javax.swing.JLabel jLabelReviewCustomerName;
    private javax.swing.JLabel jLabelReviewFilmID;
    private javax.swing.JLabel jLabelReviewFilmName;
    private javax.swing.JLabel jLabelReviewSearch;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelSearchPrompt;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBarMenu;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemAddCrew;
    private javax.swing.JMenuItem jMenuItemAddFilm;
    private javax.swing.JMenuItem jMenuItemAddUser;
    private javax.swing.JMenuItem jMenuItemCountries;
    private javax.swing.JMenuItem jMenuItemCrewRole;
    private javax.swing.JMenuItem jMenuItemDBTest;
    private javax.swing.JMenuItem jMenuItemEditKeywords;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemGenres;
    private javax.swing.JMenuItem jMenuItemLanguages;
    private javax.swing.JMenuItem jMenuItemMedia;
    private javax.swing.JMenuItem jMenuItemMethods;
    private javax.swing.JMenuItem jMenuItemRatings;
    private javax.swing.JMenuItem jMenuItemTypes;
    private javax.swing.JMenuItem jMenuStudios;
    private javax.swing.JPanel jPanelCrew;
    private javax.swing.JPanel jPanelCustomers;
    private javax.swing.JPanel jPanelFilms;
    private javax.swing.JPanel jPanelMainView;
    private javax.swing.JPanel jPanelRentals;
    private javax.swing.JPanel jPanelReviews;
    private javax.swing.JPanel jPanelSearchStart;
    private javax.swing.JPanel jPanelSearchView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSlider jSliderRentalTime;
    private javax.swing.JTable jTableCrew;
    private javax.swing.JTable jTableCustomers;
    private javax.swing.JTable jTableFilms;
    private javax.swing.JTable jTableRentals;
    private javax.swing.JTable jTableReviews;
    private javax.swing.JTextField jTextFieldCrewFilm;
    private javax.swing.JTextField jTextFieldCrewID;
    private javax.swing.JTextField jTextFieldCrewName;
    private javax.swing.JTextField jTextFieldCustomerID;
    private javax.swing.JTextField jTextFieldCustomerName;
    private javax.swing.JTextField jTextFieldFilmCrew;
    private javax.swing.JTextField jTextFieldFilmEndYear;
    private javax.swing.JTextField jTextFieldFilmID;
    private javax.swing.JTextField jTextFieldFilmStartYear;
    private javax.swing.JTextField jTextFieldFilmTitle;
    private javax.swing.JTextField jTextFieldRentalCustomerID;
    private javax.swing.JTextField jTextFieldRentalCustomerName;
    private javax.swing.JTextField jTextFieldReviewCustomerID;
    private javax.swing.JTextField jTextFieldReviewCustomerName;
    private javax.swing.JTextField jTextFieldReviewFilmID;
    private javax.swing.JTextField jTextFieldReviewFilmName;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    private DBManager DB;
    private ResultSet customerResults;
}
